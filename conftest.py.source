import os
import glob
import pytest
from functools import partial
from fnmatch import fnmatch


def pytest_addoption(parser):
    parser.addini("tests_type", help="Typo of the tests being run", default='unit')


KNOWN_ISSUES_INTEGRATION = {
    'ignore_list': {
        'common': [
            'integration/files/file/base/*',           # should no be included
            'integration/utils/test_reactor.py',       # not yet implemented
            '*::SaltnadoTestCase::*',                  # these are not actual tests
            'integration/cloud/providers/msazure.py',
            'integration/modules/git.py',
            'integration/cloud/helpers/virtualbox.py',

            'integration/__init__.py',

            # Running following tests causes unsuccessfully close
            # of forked processes. This will cause "hanging" jenkins jobs.
            '*::MasterTest::test_exit_status_correct_usage',
            '*::ProxyTest::test_exit_status_correct_usage',
            '*::FileTest::test_issue_2227_file_append',

            # Evil test
            'integration/reactor/reactor.py', # This test causes "py.test" never finishes
        ]
    },
    'xfail_list': {
        'common': [
            # Always failing
            'integration/cloud/providers/virtualbox.py::BaseVirtualboxTests::test_get_manager',
            'integration/fileserver/roots_test.py::RootsTest::test_symlink_list',

            'integration/runners/fileserver.py::FileserverTest::test_symlink_list',
            'integration/modules/timezone.py::TimezoneLinuxModuleTest::test_get_hwclock',

            'integration/states/git.py::GitTest::test_latest_changed_local_branch_rev_develop',
            'integration/states/git.py::GitTest::test_latest_changed_local_branch_rev_head',
            'integration/states/git.py::GitTest::test_latest_fast_forward',
            'integration/states/git.py::LocalRepoGitTest::test_renamed_default_branch',

            'integration/loader/ext_grains.py::LoaderGrainsTest::test_grains_overwrite',
            'integration/loader/ext_modules.py::LoaderOverridesTest::test_overridden_internal',

            'integration/modules/decorators.py::DecoratorTest::test_depends',
            'integration/modules/decorators.py::DecoratorTest::test_depends_will_not_fallback',
            'integration/modules/decorators.py::DecoratorTest::test_missing_depends_will_fallback',

            # Sometimes failing in jenkins.
            'integration/shell/call.py::CallTest::test_issue_14979_output_file_permissions',
            'integration/shell/call.py::CallTest::test_issue_15074_output_file_append',
            'integration/shell/call.py::CallTest::test_issue_2731_masterless',
            'integration/shell/matcher.py::MatchTest::test_grain',

            'integration/netapi/rest_tornado/test_app.py::TestSaltAPIHandler::test_simple_local_post_only_dictionary_request',
            'integration/shell/master_tops.py::MasterTopsTest::test_custom_tops_gets_utilized',
            'integration/states/svn.py::SvnTest::test_latest', # sles12sp1
            'integration/states/svn.py::SvnTest::test_latest_empty_dir', # sles12sp1
            'integration/runners/state.py::StateRunnerTest::test_orchestrate_output', # sles12sp1 rhel7
        ],
        'rhel6': [
            'integration/cloud/providers/virtualbox.py::CreationDestructionVirtualboxTests::test_vm_creation_and_destruction',
            'integration/cloud/providers/virtualbox.py::CloneVirtualboxTests::test_create_machine',
            'integration/cloud/providers/virtualbox.py::BootVirtualboxTests::test_start_stop',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_extra_attributes',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_extra_nonexistant_attribute_with_default',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_extra_nonexistant_attributes',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_imachine_object_default',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_override_attributes',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_unknown_object',
        ],
        'rhel7': [
            'integration/states/archive.py::ArchiveTest::test_archive_extracted_skip_verify',
            'integration/states/archive.py::ArchiveTest::test_archive_extracted_with_root_user_and_group',
            'integration/states/archive.py::ArchiveTest::test_archive_extracted_with_source_hash',
        ],
        'sles11sp3': [
            'integration/cloud/providers/virtualbox.py::CreationDestructionVirtualboxTests::test_vm_creation_and_destruction',
            'integration/cloud/providers/virtualbox.py::CloneVirtualboxTests::test_create_machine',
            'integration/cloud/providers/virtualbox.py::BootVirtualboxTests::test_start_stop',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_extra_attributes',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_extra_nonexistant_attribute_with_default',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_extra_nonexistant_attributes',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_imachine_object_default',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_override_attributes',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_unknown_object',
        ],
        'sles11sp4': [
            'integration/cloud/providers/virtualbox.py::CreationDestructionVirtualboxTests::test_vm_creation_and_destruction',
            'integration/cloud/providers/virtualbox.py::CloneVirtualboxTests::test_create_machine',
            'integration/cloud/providers/virtualbox.py::BootVirtualboxTests::test_start_stop',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_extra_attributes',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_extra_nonexistant_attribute_with_default',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_extra_nonexistant_attributes',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_imachine_object_default',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_override_attributes',
            'integration/cloud/providers/virtualbox.py::XpcomConversionTests::test_unknown_object',
        ],
        'sles12': [
        ],
        'sles12sp1': [
        ],
        'sles12sp2': [
        ],
    }
}


KNOWN_ISSUES_UNIT = {
    'ignore_list': {
        'common': [
            'unit/zypp_plugins_test.py', # BogusIO missing in zypp_plugin
            'unit/netapi/rest_tornado/test_handlers.py',
            'unit/returners/smtp_return_test.py',
            'unit/transport/zeromq_test.py',  # Prevent pytests hang after tests
            'unit/conf_test.py::ConfTest::test_conf_master_sample_is_commented', # we have uncommented custom config
            'unit/conf_test.py::ConfTest::test_conf_minion_sample_is_commented', # we have uncommented custom config
            'unit/conf_test.py::ConfTest::test_conf_proxy_sample_is_commented', # we have uncommented custom config
            '*rsync_test.py::*',
            'unit/modules/darwin_sysctl_test.py',
            'unit/modules/boto_vpc_test.py',
            'unit/states/boto_cloudwatch_event_test.py',
            'unit/states/boto_vpc_test.py',
            'unit/utils/boto_test.py',
        ],
    },
    'xfail_list': {
        'common': [
            # not working in docker containers
            'unit/modules/cmdmod_test.py::CMDMODTestCase::test_run',
            'unit/conf_test.py::ConfTest::test_conf_cloud_maps_d_files_are_commented',
            'unit/conf_test.py::ConfTest::test_conf_cloud_profiles_d_files_are_commented',
            'unit/conf_test.py::ConfTest::test_conf_cloud_providers_d_files_are_commented',
            'unit/utils/extend_test.py::ExtendTestCase::test_run',
            'unit/beacons/glxinfo.py::GLXInfoBeaconTestCase::test_no_user',
            'unit/beacons/glxinfo.py::GLXInfoBeaconTestCase::test_non_dict_config',

            # Boto failing tests
            'unit/modules/boto_apigateway_test.py::BotoApiGatewayTestCaseBase::runTest',
            'unit/modules/boto_cloudwatch_event_test.py::BotoCloudWatchEventTestCaseBase::runTest',
            'unit/modules/boto_cognitoidentity_test.py::BotoCognitoIdentityTestCaseBase::runTest',
            'unit/modules/boto_elasticsearch_domain_test.py::BotoElasticsearchDomainTestCaseBase::runTest',
            'unit/states/boto_apigateway_test.py::BotoApiGatewayStateTestCaseBase::runTest',
            'unit/states/boto_cognitoidentity_test.py::BotoCognitoIdentityStateTestCaseBase::runTest',
            'unit/states/boto_elasticsearch_domain_test.py::BotoElasticsearchDomainStateTestCaseBase::runTest',

            'unit/modules/inspect_collector_test.py::InspectorCollectorTestCase::test_file_tree',
        ],
        'sles12sp1': [
            'unit/cloud/clouds/dimensiondata_test.py::DimensionDataTestCase::test_avail_sizes',
        ],
        'sles12sp2': [
            'unit/cloud/clouds/dimensiondata_test.py::DimensionDataTestCase::test_avail_sizes',
        ],
    }
}


KNOWN_ISSUES = {
    'integration': KNOWN_ISSUES_INTEGRATION,
    'unit': KNOWN_ISSUES_UNIT
}


def get_list(tests_type, name):
    version = os.environ.get('VERSION')
    flavor = os.environ.get('FLAVOR')
    assert name in ['ignore_list', 'xfail_list']
    return (
        (KNOWN_ISSUES[tests_type][name].get('common') or []) +
        (KNOWN_ISSUES[tests_type][name].get(flavor) or []) +
        (KNOWN_ISSUES[tests_type][name].get(version) or []) +
        (KNOWN_ISSUES[tests_type][name].get('{0}/{1}'.format(version, flavor)) or [])
    )


def pytest_ignore_collect(path, config):
    return any(map(path.fnmatch, get_list(config.getini('tests_type'), 'ignore_list')))


def pytest_itemcollected(item):
    xfail_list = get_list(item.config.getini('tests_type'), 'xfail_list')
    ignore_list = get_list(item.config.getini('tests_type'), 'ignore_list')

    matcher = partial(fnmatch, item.nodeid)
    if any(map(matcher, xfail_list)):
        item.addExpectedFailure(item.parent, None)
    elif any(map(matcher, ignore_list)):
        item.addSkip(item.parent, None)


def pytest_configure(config):
    os.sys.path.extend(glob.glob(os.environ.get('SALT_TESTS')))


@pytest.fixture(scope="session")
def test_daemon(add_options, request):
    from integration import TestDaemon
    return TestDaemon(request.instance)


@pytest.fixture(scope="session")
def transplant_configs(test_daemon):
    test_daemon.transplant_configs(transport='zeromq')


@pytest.fixture(scope="session")
def add_options(request):
    from tests.runtests import SaltTestsuiteParser
    parser = SaltTestsuiteParser([])
    request.instance.options, args = parser.parse_args([])


@pytest.fixture(scope="session")
def salt_test_daemon(transplant_configs, test_daemon, request):
    finalizer = partial(test_daemon.__exit__, None, None, None)
    request.addfinalizer(finalizer)
    test_daemon.__enter__()
